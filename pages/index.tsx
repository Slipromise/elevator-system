import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useDispatch, useSelector } from "react-redux";
import { pickupPassenger, randomPassengers, setting, start, timing, updateElevators } from '../store/elevatorSlice';
import { elevatorSelector, pickupPassengerListSelector } from '../store/selectors';
import { useInterval } from 'react-use';
import { useEffect, useMemo, useState } from 'react';
import numeral from 'numeral'

const Home: NextPage = () => {
  const dispatch = useDispatch();

  const {
    secondsOfFloor,
    secondsOfPickup,
    secondsOfPeople,
    status,
    totalSeconds,
    elevators,
    waitings,
    floorCount,
    elevatorCount,
    capacity,
    numberOfPeopleGenerated,
    targetPeople,
  } = useSelector(elevatorSelector);

  const pickupList = useSelector(pickupPassengerListSelector);

  useInterval(() => dispatch(timing()), status === "running" ? 1000 : null);

  useEffect(()=>{
    for (let i = 0; i < pickupList.length; i++) {
      const id = pickupList[i];
      setTimeout(() => dispatch(pickupPassenger(id)), secondsOfPickup * 1000);
    }
  },[dispatch, pickupList, secondsOfPickup])

  useEffect(()=>{
    if(totalSeconds!== 0 &&  totalSeconds % secondsOfFloor === 0) {
      dispatch(updateElevators())
    }

    if (totalSeconds !== 0 && totalSeconds % secondsOfPeople === 0) {
      dispatch(randomPassengers());
    }

  },[dispatch, secondsOfFloor, secondsOfPeople, totalSeconds]);

  const waitingPassengers: { floor: number; passengers: string[] }[] = useMemo(
    () =>
      waitings.reduce<{ floor: number; passengers: string[] }[]>(
        (prev, curr) => {
          const found = prev.find(({ floor }) => floor === curr.fromFloor);
          const text = `${curr.name}${
            curr.fromFloor > curr.toFloor ? "⬇" : "⬆"
          }`;
          if(found){
            found.passengers.push(text)
          }
          return found
            ? prev
            : [...prev, { floor: curr.fromFloor, passengers: [text] }];
        }
          ,
        []
      ),
    [waitings]
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {status !== "running" && (
        <ul>
          <li>
            <label>樓層數：</label>
            <input
              type="number"
              value={floorCount}
              onChange={(e) =>
                dispatch(setting({ floorCount: Number(e.target.value) }))
              }
            />
          </li>
          <li>
            <label>電梯數：</label>
            <input
              type="number"
              value={elevatorCount}
              onChange={(e) =>
                dispatch(setting({ elevatorCount: Number(e.target.value) }))
              }
            />
          </li>
          <li>
            <label>最大乘客數：</label>
            <input
              type="number"
              value={capacity}
              onChange={(e) =>
                dispatch(setting({ capacity: Number(e.target.value) }))
              }
            />
          </li>
          <li>
            <label>每層移動秒數：</label>
            <input
              type="number"
              value={secondsOfFloor}
              onChange={(e) =>
                dispatch(setting({ secondsOfFloor: Number(e.target.value) }))
              }
            />
          </li>
          <li>
            <label>上下乘客秒數：</label>
            <input
              type="number"
              value={secondsOfPickup}
              onChange={(e) =>
                dispatch(setting({ secondsOfPickup: Number(e.target.value) }))
              }
            />
          </li>
          <li>
            <label>乘客生成秒數：</label>
            <input
              type="number"
              value={secondsOfPeople}
              onChange={(e) =>
                dispatch(setting({ secondsOfPeople: Number(e.target.value) }))
              }
            />
          </li>
          <li>
            <label>每次生成乘客數：</label>
            <input
              type="number"
              value={numberOfPeopleGenerated}
              onChange={(e) =>
                dispatch(
                  setting({ numberOfPeopleGenerated: Number(e.target.value) })
                )
              }
            />
          </li>
          <li>
            <label>目標達成乘客數：</label>
            <input
              type="number"
              value={targetPeople}
              onChange={(e) =>
                dispatch(setting({ targetPeople: Number(e.target.value) }))
              }
            />
          </li>
        </ul>
      )}
      {status !== "running" && (
        <button onClick={() => dispatch(start())}>開始</button>
      )}
      <h2>{`花費時間 ${numeral(totalSeconds).format("00:00")}`}</h2>
      {status !== "initialization" && (
        <>
          {elevators.map((item) => (
            <div key={item.id}>
              <h2>{`${item.floor}F${
                item.status === "up" ? "⬆" : item.status === "down" ? "⬇" : ""
              }`}</h2>
              <p>
                前往樓層：
                {[...item.passengers]
                  .sort((a, b) =>
                    item.status === "up"
                      ? a.toFloor - b.toFloor
                      : b.toFloor - a.toFloor
                  )
                  .map(({ toFloor }) => `${toFloor}F`)
                  .reduce<string[]>(
                    (prev, curr) =>
                      prev.includes(curr) ? prev : [...prev, curr],
                    []
                  )
                  .join("-")}
              </p>
              <p>
                乘客名單：
                {item.passengers.map(({ name }) => name).join("、")}
              </p>
            </div>
          ))}
          <div>
            <h3>樓層等待人員</h3>
            {waitingPassengers.map(({ floor, passengers }) => (
              <ul key={floor}>
                <h4>{`${floor}F`}</h4>
                {passengers.map((name,index) => (
                  <li key={name+index}>{name}</li>
                ))}
              </ul>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default Home
